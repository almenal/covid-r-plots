oldest = glob_con[y-5]
recent = glob_con[y]
rate = ((recent/oldest)**(1/5))
return(rate)
})
#Deaths
glob_ded = data_died %>% filter(Country.Region == x) %>% select(5:ncol(data_conf)) %>% as.matrix()
glob_ded = apply(glob_ded, 2, sum, na.rm = T)
#Recovered
glob_rec = data_recov %>% filter(Country.Region == x) %>% select(5:ncol(data_conf)) %>% as.matrix()
if(is.null(glob_rec)){
glob_rec = rep(NA, length(glob_ded))
}else if(!(is.null(glob_rec)) & nrow(glob_rec) > 1) {
glob_rec = apply(glob_rec, 2, as.numeric)
glob_rec = apply(glob_rec, 2, sum, na.rm = T)
} else if(!(is.null(glob_rec)) & nrow(glob_rec) == 1){
glob_rec = apply(glob_rec, 2, as.numeric)
}
globb = data.frame('loc' = paste(x, 'global', sep = '_'), 'time_base' = time,
'conf' = glob_con, 'died' = glob_ded, 'recov' = glob_rec,
'growth_con_1' = c(NaN, glob_growth_con_1), 'growth_con_5' = c(rep(NA,5), glob_growth_con_5) )
#Merge regional and national data into one dataframe
datt = bind_rows(regdat, globb)
return(datt)
}else{
#In case the country provides only nation-wide data, get that data
con = data_conf %>% filter(Country.Region == x) %>% select(5:ncol(data_conf)) %>% unlist() %>% as.numeric()
# Add growth rate
growth_con_1 = sapply(2:length(con), function(y){ #We start from 2 to avoid conversion to list
diff = con[y]-con[y-1]
rate = diff/con[y-1]
return(rate)
})
growth_con_5 = sapply(6:length(con), function(y){ #We start from 2 to avoid conversion to list
oldest = con[y-5]
recent = con[y]
rate = ((recent/oldest)**(1/5))
return(rate)
})
ded = data_died %>% filter(Country.Region == x) %>% select(5:ncol(data_died)) %>% unlist() %>% as.numeric()
rec = data_recov %>% filter(Country.Region == x) %>% select(5:ncol(data_recov)) %>% unlist() %>% as.numeric()
if(length(rec) == 0){rec = rep(NA, length(ded))}
datt = data.frame('loc' = x, 'time_base' = time, 'conf' = con, 'died' = ded, 'recov' = rec,
'growth_con_1' = c(NaN, growth_con_1), 'growth_con_5' = c(rep(NA,5), growth_con_5) )
return(datt)
}
})
# Merge data from all countries into single final dataframe
df = dfl %>% bind_rows() %>%
mutate(growth_con_1 = replace(growth_con_1, growth_con_1 == Inf, NaN),
growth_con_5 = replace(growth_con_5, growth_con_5 == Inf, NaN))
### Normalizing by time: Days after detection of kth patient -------
thresh_pat = 100
df_norm = lapply(dfl, function(x){
#If the country's data is divided into regions, normalize regional data
if(length(unique(x$loc)) > 1){
regions = unique(x$loc) ; names(regions) = regions
days_reg = lapply(regions, function(y){
days = x %>% filter(loc == y) %>% select(time_base)
days = as.Date(days[,1]) #dplyr keeps objects as tibbles, so we have to coerce it into Date
day0 = x %>% filter(loc == y, conf >= thresh_pat) %>% select(time_base) %>% slice(1)
day0 = day0[1,1]
time_since_kth_case = days - day0
norm = x %>% filter(loc == y) %>%
mutate(timenorm = time_since_kth_case,
timenorm_num = as.numeric(timenorm))
return(norm)
}) %>% bind_rows() #Merge regional and global data together
return(days_reg)
}else{
days = x %>% select(time_base)
days = as.Date(days[,1]) #dplyr keeps objects as tibbles, so we have to coerce it into Date
day0 = x %>% filter(conf >= thresh_pat) %>% select(time_base) %>% slice(1)
day0 = day0[1,1]
time_since_kth_case = days - day0
norm = x %>%
mutate(timenorm = time_since_kth_case,
timenorm_num = as.numeric(timenorm))
return(norm)
}
}) %>% bind_rows()
saveRDS(df_norm, file = 'covid-cases-timenorm.RDS') # Save the data in R format
write.csv(df_norm, file = 'covid-cases-timenorm.csv') # Save it as csv
#### List of each country and its day 0 -------------
days0 = lapply(dfl, function(x){
#If the country's data is divided into regions, normalize regional data
if(length(unique(x$loc)) > 1){
regions = unique(x$loc) ; names(regions) = regions
days_reg = lapply(regions, function(y){
day0_reg = x %>% filter(loc == y, conf >= thresh_pat) %>% select(time_base) %>% slice(1)
day0_reg = day0_reg[1,1]
k_reg = data.frame('loc' = y, 'day0' = day0_reg)
return(k_reg)
})
#Merge regional data into one data frame
#country_global is also within the loc column, so the global data is also computed
days_reg = days_reg %>% bind_rows()
return(days_reg)
}else{
day0 = x %>% filter(conf >= thresh_pat) %>% select(time_base) %>% slice(1)
day0 = day0[1,1]
loc = as.character(x$loc)[1]
k = data.frame('loc' = loc, 'day0' = day0)
return(k)
}
}) %>% bind_rows()
### Smaller dataframe with """"""relevant"""""" countries -------
subgroup = setNames(nm = sort(c('Spain', 'Italy', 'Germany', 'United Kingdom_global', 'Netherlands_global', 'China_global'), decreasing = F) )
df_sub = df_norm %>% filter(loc %in% subgroup)
days0_sub = days0 %>% filter(loc %in% subgroup)
saveRDS(df_sub, file = 'covid-cases-timenorm-small.RDS')
write.csv(df_sub, file = 'covid-cases-timenorm-small.csv')
#### ~~~Plots ---------------------------
df_labels = df_sub %>% group_by(loc) %>%
summarise(conf = max(conf), maxtimediff = max(timenorm),
growth_con_1 = max(growth_con_1, na.rm = T),
growth_con_5 = max(growth_con_5, na.rm = T),
latestday = max(time_base)) %>%
mutate(day0 = days0_sub$day0)
maxgrowthdaynorm = sapply(subgroup, function(x){
maxgrowth = df_sub %>% filter(loc == x) %>% select(growth_con_1) %>% max(na.rm = T)
day = df_norm %>% filter(loc == x, growth_con_1 == maxgrowth) %>% select(timenorm_num) %>% unlist()
return(day)
})
df_labels = df_labels %>% mutate(maxgrowthday = maxgrowthdaynorm)
### Time evolution of cases normalized by detection of kth case ------
## ggplot
p1 =
ggplot(df_sub, aes(timenorm_num, conf, col = loc)) +
geom_line() + geom_point() +
geom_label(data = df_labels, show.legend = F,
aes(x = maxtimediff, label = conf, hjust = 1, vjust = 0)) +
geom_label(data = df_labels, show.legend = F,
aes(y = seq((0.6*max(df_sub$conf, na.rm = T)), (0.9*max(df_sub$conf, na.rm = T)), length.out = nrow(df_labels)),
x = 0, label = paste(loc, day0, sep = ': ')), hjust = 0) +
annotate(geom = 'text', x = 0, y = (0.95*max(df_sub$conf, na.rm = T)), col = 'black', hjust = 0,
label = paste0('Day of detection of ', thresh_pat, 'th case')) +
annotate(geom = 'label', x = 0.9*max(df_sub$timenorm_num), y = 0.2*max(df_sub$conf),
label = paste0('Current date: ', max(df_sub$time_base)), col = 'black') +
scale_x_continuous( breaks = seq(-20, max(df_sub$timenorm_num), 5), limits = c(0,max(df_sub$timenorm_num)) ) +
#scale_y_log10() + # Comment this line to make the scale linear
theme_grey(base_family = 'Montserrat-Medium') +
theme(axis.text.x = element_text(angle = 45, vjust = 0.6),
legend.position = 'right') +
labs(x = paste0('Days after detection of ', thresh_pat, 'th case'),
title = 'Number of confirmed cases by country',
col = 'Country')
plot(p1)
#ggsave(plot = p1, scale = 1.5, filename = paste0('conf_cases_after_', thresh_pat, 'th_patient.svg'))
#ggsave(plot = p1, scale = 1.5, filename = paste0('conf_cases_after_', thresh_pat, 'th_patient.png'))
### Growth rate evolution ----------
p2 =
ggplot(df_sub, aes(timenorm_num, y = growth_con_5, col = loc)) +
geom_line() + geom_point() +
scale_x_continuous( limits = c(0, max(df_sub$timenorm_num)), breaks = seq(-20, max(df_sub$timenorm_num), 5) ) +
theme_grey() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.6), legend.position = 'right') +
labs(x = paste0('Days after detection of ', thresh_pat, 'th case'),
y = 'Growth rate respective to previous day',
title = 'Growth rate of cases by country',
col = 'Country')
p2
p2
dev.off()
plotly::ggplotly(p2)
p5
View(df_sub)
cols = c('Active' = 'orange', 'Recovered-cumul' = 'darkgreen', 'Died-cumul' = 'red', 'Total-cumul' = 'darkgrey')
p5 = ggplot(df_sub, aes(x = timenorm_num)) +
geom_col(aes(y = conf, fill = 'Total-cumul'), alpha = .4) +
geom_col(aes(y = active, fill = 'Active'), alpha = 1) +
geom_col(aes(y = died, fill = 'Died-cumul'), alpha = .9) +
geom_col(aes(y = recov, fill = 'Recovered-cumul'), alpha = .5) +
scale_fill_manual(name="Legend",values=cols) +
theme(legend.position = 'top')+
facet_wrap(~loc)
p5
View(df_sub)
### Active cases -------------------
df_sub = df_sub %>% mutate(active = conf - (died + recov))
p4 = ggplot(df_sub, aes(x = timenorm_num, y = active, col = loc)) +
geom_point() + geom_line()
p4
p1
p5 = ggplot(df_sub, aes(x = timenorm_num)) +
geom_col(aes(y = conf, fill = 'Total-cumul'), alpha = .4) +
geom_col(aes(y = active, fill = 'Active'), alpha = 1) +
geom_col(aes(y = died, fill = 'Died-cumul'), alpha = .9) +
geom_col(aes(y = recov, fill = 'Recovered-cumul'), alpha = .5) +
scale_fill_manual(name="Legend",values=cols) +
theme(legend.position = 'top')+
facet_wrap(~loc)
p5
list.dirs()
list.files()
file.info('covid-cases-timenorm-small.RDS')
file.info('covid-cases-timenorm-small.RDS')$mtime
Sys.Date()
a = file.info('covid-cases-timenorm-small.RDS')$mtime
b = Sys.Date()
a == b
as.Date(a)
df_sub = readRDS('covid-cases-timenorm-small.RDS')
metadata = file.info('covid-cases-timenorm-small.RDS')
as.Date(metadata$mtime) != Sys.Date()
df_labels = df_sub %>% group_by(loc) %>%
summarise(conf = max(conf), maxtimediff = max(timenorm),
growth_con_1 = max(growth_con_1, na.rm = T),
growth_con_5 = max(growth_con_5, na.rm = T),
latestday = max(time_base)) %>%
mutate(day0 = days0_sub$day0)
### Time evolution of cases normalized by detection of kth case ------
p1 = ggplot(df_sub, aes(timenorm_num, conf, col = loc)) +
geom_line() + geom_point() +
geom_label(data = df_labels, show.legend = F,
aes(x = maxtimediff, label = conf, hjust = 1, vjust = 0)) +
geom_label(data = df_labels, show.legend = F,
aes(y = seq((0.6*max(df_sub$conf, na.rm = T)), (0.9*max(df_sub$conf, na.rm = T)), length.out = nrow(df_labels)),
x = 0, label = paste(loc, day0, sep = ': ')), hjust = 0) +
annotate(geom = 'text', x = 0, y = (0.95*max(df_sub$conf, na.rm = T)), col = 'black', hjust = 0,
label = paste0('Day of detection of ', thresh_pat, 'th case')) +
annotate(geom = 'label', x = 0.9*max(df_sub$timenorm_num), y = 0.2*max(df_sub$conf),
label = paste0('Current date: ', max(df_sub$time_base)), col = 'black') +
scale_x_continuous( breaks = seq(-20, max(df_sub$timenorm_num), 5), limits = c(0,max(df_sub$timenorm_num)) ) +
#scale_y_log10() + # Comment this line to make the scale linear
theme_grey(base_family = 'Montserrat-Medium') +
theme(axis.text.x = element_text(angle = 45, vjust = 0.6),
legend.position = 'right') +
labs(x = paste0('Days after detection of ', thresh_pat, 'th case'),
title = 'Number of confirmed cases by country',
col = 'Country')
source('~/Documents/COVID-19/data-cleanup-covid-timeseries.r', echo=TRUE)
df_sub = readRDS('covid-cases-timenorm-small.RDS')
day0_sub = readRDS('covid-day0-small.RDS')
metadata = file.info('covid-cases-timenorm-small.RDS')
if(as.Date(metadata$mtime) != Sys.Date()){
source('data-cleanup-covid-timeseries.r')
}
df_labels = df_sub %>% group_by(loc) %>%
summarise(conf = max(conf), maxtimediff = max(timenorm),
growth_con_1 = max(growth_con_1, na.rm = T),
growth_con_5 = max(growth_con_5, na.rm = T),
latestday = max(time_base)) %>%
mutate(day0 = days0_sub$day0)
days0_sub = readRDS('covid-day0-small.RDS')
df_labels = df_sub %>% group_by(loc) %>%
summarise(conf = max(conf), maxtimediff = max(timenorm),
growth_con_1 = max(growth_con_1, na.rm = T),
growth_con_5 = max(growth_con_5, na.rm = T),
latestday = max(time_base)) %>%
mutate(day0 = days0_sub$day0)
maxgrowthdaynorm = sapply(subgroup, function(x){
maxgrowth = df_sub %>% filter(loc == x) %>% select(growth_con_1) %>% max(na.rm = T)
day = df_norm %>% filter(loc == x, growth_con_1 == maxgrowth) %>% select(timenorm_num) %>% unlist()
return(day)
})
subgroup = setNames(nm = sort(c('Spain', 'Italy', 'Germany', 'United Kingdom_global', 'Netherlands_global', 'China_global'), decreasing = F) )
maxgrowthdaynorm = sapply(subgroup, function(x){
maxgrowth = df_sub %>% filter(loc == x) %>% select(growth_con_1) %>% max(na.rm = T)
day = df_norm %>% filter(loc == x, growth_con_1 == maxgrowth) %>% select(timenorm_num) %>% unlist()
return(day)
})
maxgrowthdaynorm = sapply(subgroup, function(x){
maxgrowth = df_sub %>% filter(loc == x) %>% select(growth_con_1) %>% max(na.rm = T)
day = df_sub %>% filter(loc == x, growth_con_1 == maxgrowth) %>% select(timenorm_num) %>% unlist()
return(day)
})
df_labels = df_labels %>% mutate(maxgrowthday = maxgrowthdaynorm)
### Time evolution of cases normalized by detection of kth case ------
p1 = ggplot(df_sub, aes(timenorm_num, conf, col = loc)) +
geom_line() + geom_point() +
geom_label(data = df_labels, show.legend = F,
aes(x = maxtimediff, label = conf, hjust = 1, vjust = 0)) +
geom_label(data = df_labels, show.legend = F,
aes(y = seq((0.6*max(df_sub$conf, na.rm = T)), (0.9*max(df_sub$conf, na.rm = T)), length.out = nrow(df_labels)),
x = 0, label = paste(loc, day0, sep = ': ')), hjust = 0) +
annotate(geom = 'text', x = 0, y = (0.95*max(df_sub$conf, na.rm = T)), col = 'black', hjust = 0,
label = paste0('Day of detection of ', thresh_pat, 'th case')) +
annotate(geom = 'label', x = 0.9*max(df_sub$timenorm_num), y = 0.2*max(df_sub$conf),
label = paste0('Current date: ', max(df_sub$time_base)), col = 'black') +
scale_x_continuous( breaks = seq(-20, max(df_sub$timenorm_num), 5), limits = c(0,max(df_sub$timenorm_num)) ) +
#scale_y_log10() + # Comment this line to make the scale linear
theme_grey(base_family = 'Montserrat-Medium') +
theme(axis.text.x = element_text(angle = 45, vjust = 0.6),
legend.position = 'right') +
labs(x = paste0('Days after detection of ', thresh_pat, 'th case'),
title = 'Number of confirmed cases by country',
col = 'Country')
threshpat = 100
### Time evolution of cases normalized by detection of kth case ------
p1 = ggplot(df_sub, aes(timenorm_num, conf, col = loc)) +
geom_line() + geom_point() +
geom_label(data = df_labels, show.legend = F,
aes(x = maxtimediff, label = conf, hjust = 1, vjust = 0)) +
geom_label(data = df_labels, show.legend = F,
aes(y = seq((0.6*max(df_sub$conf, na.rm = T)), (0.9*max(df_sub$conf, na.rm = T)), length.out = nrow(df_labels)),
x = 0, label = paste(loc, day0, sep = ': ')), hjust = 0) +
annotate(geom = 'text', x = 0, y = (0.95*max(df_sub$conf, na.rm = T)), col = 'black', hjust = 0,
label = paste0('Day of detection of ', thresh_pat, 'th case')) +
annotate(geom = 'label', x = 0.9*max(df_sub$timenorm_num), y = 0.2*max(df_sub$conf),
label = paste0('Current date: ', max(df_sub$time_base)), col = 'black') +
scale_x_continuous( breaks = seq(-20, max(df_sub$timenorm_num), 5), limits = c(0,max(df_sub$timenorm_num)) ) +
#scale_y_log10() + # Comment this line to make the scale linear
theme_grey(base_family = 'Montserrat-Medium') +
theme(axis.text.x = element_text(angle = 45, vjust = 0.6),
legend.position = 'right') +
labs(x = paste0('Days after detection of ', thresh_pat, 'th case'),
title = 'Number of confirmed cases by country',
col = 'Country')
thresh_pat = 100
### Time evolution of cases normalized by detection of kth case ------
p1 = ggplot(df_sub, aes(timenorm_num, conf, col = loc)) +
geom_line() + geom_point() +
geom_label(data = df_labels, show.legend = F,
aes(x = maxtimediff, label = conf, hjust = 1, vjust = 0)) +
geom_label(data = df_labels, show.legend = F,
aes(y = seq((0.6*max(df_sub$conf, na.rm = T)), (0.9*max(df_sub$conf, na.rm = T)), length.out = nrow(df_labels)),
x = 0, label = paste(loc, day0, sep = ': ')), hjust = 0) +
annotate(geom = 'text', x = 0, y = (0.95*max(df_sub$conf, na.rm = T)), col = 'black', hjust = 0,
label = paste0('Day of detection of ', thresh_pat, 'th case')) +
annotate(geom = 'label', x = 0.9*max(df_sub$timenorm_num), y = 0.2*max(df_sub$conf),
label = paste0('Current date: ', max(df_sub$time_base)), col = 'black') +
scale_x_continuous( breaks = seq(-20, max(df_sub$timenorm_num), 5), limits = c(0,max(df_sub$timenorm_num)) ) +
#scale_y_log10() + # Comment this line to make the scale linear
theme_grey(base_family = 'Montserrat-Medium') +
theme(axis.text.x = element_text(angle = 45, vjust = 0.6),
legend.position = 'right') +
labs(x = paste0('Days after detection of ', thresh_pat, 'th case'),
title = 'Number of confirmed cases by country',
col = 'Country')
p1
ggsave(plot = p1, scale = 1.5, filename = paste0('conf_cases_after_', thresh_pat, 'th_patient.svg'))
ggsave(plot = p1, scale = 1.5, filename = paste0('conf_cases_after_', thresh_pat, 'th_patient.png'))
install.packages('svglite')
ggsave(plot = p1, scale = 1.5, filename = paste0('conf_cases_after_', thresh_pat, 'th_patient.svg'))
p2 = ggplot(df_sub, aes(timenorm_num, y = growth_con_5, col = loc)) +
geom_line() + geom_point() +
scale_x_continuous( limits = c(0, max(df_sub$timenorm_num)), breaks = seq(-20, max(df_sub$timenorm_num), 5) ) +
theme_grey() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.6), legend.position = 'right') +
labs(x = paste0('Days after detection of ', thresh_pat, 'th case'),
y = 'Growth rate respective to previous day',
title = 'Growth rate of cases by country',
col = 'Country')
plotly::ggplotly(p2)
### Detection of kth patient per country -----
days_sub = days0_sub %>% filter(loc %in% subgroup) %>% arrange(day0) %>%
mutate(loc = factor(loc, levels = loc))
p3 = ggplot(days_sub, aes(x = loc, y = day0)) +
geom_label(aes(label = loc)) +
scale_y_date(date_breaks = '3 days') +
theme(axis.text.x = element_text(angle = 45, vjust = 0.6)) +
coord_flip()
p3
p3 = ggplot(days_sub, aes(x = loc, y = day0)) +
geom_label(aes(label = loc), hjust = 1. vjust = 0) +
geom_point() +
scale_y_date(date_breaks = '3 days') +
theme(axis.text.x = element_text(angle = 45, vjust = 0.6)) +
coord_flip()
p3 = ggplot(days_sub, aes(x = loc, y = day0)) +
geom_label(aes(label = loc), hjust = 1, vjust = 0) +
geom_point() +
scale_y_date(date_breaks = '3 days') +
theme(axis.text.x = element_text(angle = 45, vjust = 0.6)) +
coord_flip()
p3
p3 = ggplot(days_sub, aes(x = loc, y = day0)) +
geom_label(aes(label = loc), hjust = 0, vjust = 0) +
geom_point() +
scale_y_date(date_breaks = '3 days') +
theme(axis.text.x = element_text(angle = 45, vjust = 0.6)) +
coord_flip()
p3
p3 = ggplot(days_sub, aes(x = loc, y = day0)) +
geom_label(aes(label = loc), hjust = 0.5, vjust = 0) +
geom_point() +
scale_y_date(date_breaks = '3 days') +
theme(axis.text.x = element_text(angle = 45, vjust = 0.6)) +
coord_flip()
p3
p3 = ggplot(days_sub, aes(x = loc, y = day0)) +
geom_label(aes(label = loc), hjust = 0.5, vjust = 0) +
geom_label(aes(label = day0), hjust = 0.5, vjust = 1) +
geom_point() +
scale_y_date(date_breaks = '3 days') +
theme(axis.text.x = element_text(angle = 45, vjust = 0.6)) +
coord_flip()
p3
p3 = ggplot(days_sub, aes(x = loc, y = day0)) +
geom_label(aes(label = loc), hjust = 0.5, vjust = 0) +
geom_label(aes(label = day0), hjust = 0.5, vjust = 1) +
geom_point() +
scale_y_date(date_breaks = '3 days') +
theme(axis.text.x = element_text(angle = 45, vjust = 0.6)) +
labs(x = 'Day of detection of 100th patient', y = 'Country') +
coord_flip()
p3
p3 = ggplot(days_sub, aes(x = loc, y = day0)) +
geom_label(aes(label = loc), hjust = 0.5, vjust = 0) +
geom_label(aes(label = day0), hjust = 0.5, vjust = 1) +
geom_point() +
scale_y_date(date_breaks = '3 days') +
theme(axis.text.x = element_text(angle = 45, vjust = 0.6)) +
labs(y = 'Day of detection of 100th patient', x = 'Country') +
coord_flip()
p3
### Active cases -------------------
p4 = ggplot(df_sub, aes(x = timenorm_num, y = active, col = loc)) +
geom_point() + geom_line()
p4
source('~/Documents/COVID-19/data-cleanup-covid-timeseries.r', echo=TRUE)
df_sub = readRDS('covid-cases-timenorm-small.RDS')
days0_sub = readRDS('covid-day0-small.RDS')
metadata = file.info('covid-cases-timenorm-small.RDS')
thresh_pat = 100
if(as.Date(metadata$mtime) != Sys.Date()){
source('data-cleanup-covid-timeseries.r')
}
df_labels = df_sub %>% group_by(loc) %>%
summarise(conf = max(conf), maxtimediff = max(timenorm),
growth_con_1 = max(growth_con_1, na.rm = T),
growth_con_5 = max(growth_con_5, na.rm = T),
latestday = max(time_base)) %>%
mutate(day0 = days0_sub$day0)
subgroup = setNames(nm = sort(c('Spain', 'Italy', 'Germany', 'United Kingdom_global', 'Netherlands_global', 'China_global'), decreasing = F) )
maxgrowthdaynorm = sapply(subgroup, function(x){
maxgrowth = df_sub %>% filter(loc == x) %>% select(growth_con_1) %>% max(na.rm = T)
day = df_sub %>% filter(loc == x, growth_con_1 == maxgrowth) %>% select(timenorm_num) %>% unlist()
return(day)
})
df_labels = df_labels %>% mutate(maxgrowthday = maxgrowthdaynorm)
### Time evolution of cases normalized by detection of kth case ------
p1 = ggplot(df_sub, aes(timenorm_num, conf, col = loc)) +
geom_line() + geom_point() +
geom_label(data = df_labels, show.legend = F,
aes(x = maxtimediff, label = conf, hjust = 1, vjust = 0)) +
geom_label(data = df_labels, show.legend = F,
aes(y = seq((0.6*max(df_sub$conf, na.rm = T)), (0.9*max(df_sub$conf, na.rm = T)), length.out = nrow(df_labels)),
x = 0, label = paste(loc, day0, sep = ': ')), hjust = 0) +
annotate(geom = 'text', x = 0, y = (0.95*max(df_sub$conf, na.rm = T)), col = 'black', hjust = 0,
label = paste0('Day of detection of ', thresh_pat, 'th case')) +
annotate(geom = 'label', x = 0.9*max(df_sub$timenorm_num), y = 0.2*max(df_sub$conf),
label = paste0('Current date: ', max(df_sub$time_base)), col = 'black') +
scale_x_continuous( breaks = seq(-20, max(df_sub$timenorm_num), 5), limits = c(0,max(df_sub$timenorm_num)) ) +
#scale_y_log10() + # Comment this line to make the scale linear
theme_grey(base_family = 'Montserrat-Medium') +
theme(axis.text.x = element_text(angle = 45, vjust = 0.6),
legend.position = 'right') +
labs(x = paste0('Days after detection of ', thresh_pat, 'th case'),
title = 'Number of confirmed cases by country',
col = 'Country')
p1
ggsave(plot = p1, scale = 1.5, filename = paste0('conf_cases_after_', thresh_pat, 'th_patient.svg'))
ggsave(plot = p1, scale = 1.5, filename = paste0('conf_cases_after_', thresh_pat, 'th_patient.png'))
### Growth rate evolution ----------
p2 = ggplot(df_sub, aes(timenorm_num, y = growth_con_5, col = loc)) +
geom_line() + geom_point() +
scale_x_continuous( limits = c(0, max(df_sub$timenorm_num)), breaks = seq(-20, max(df_sub$timenorm_num), 5) ) +
theme_grey() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.6)) +
labs(x = paste0('Days after detection of ', thresh_pat, 'th case'),
y = 'Growth rate respective to previous 5 days',
title = 'Growth rate of cases by country',
col = 'Country')
p2
plotly::ggplotly(p2)
### Detection of kth patient per country -----
days_sub = days0_sub %>% filter(loc %in% subgroup) %>% arrange(day0) %>%
mutate(loc = factor(loc, levels = loc))
p3 = ggplot(days_sub, aes(x = loc, y = day0)) +
geom_label(aes(label = loc), hjust = 0.5, vjust = 0) +
geom_label(aes(label = day0), hjust = 0.5, vjust = 1) +
geom_point() +
scale_y_date(date_breaks = '3 days') +
theme(axis.text.x = element_text(angle = 45, vjust = 0.6)) +
labs(y = 'Day of detection of 100th patient', x = 'Country') +
coord_flip()
p3
### Active cases -------------------
p4 = ggplot(df_sub, aes(x = timenorm_num, y = active, col = loc)) +
geom_point() + geom_line()
p4
cols = c('Active' = 'orange', 'Recovered-cumul' = 'darkgreen', 'Died-cumul' = 'red', 'Total-cumul' = 'darkgrey')
p5 = ggplot(df_sub, aes(x = timenorm_num)) +
geom_col(aes(y = conf, fill = 'Total-cumul'), alpha = .4) +
geom_col(aes(y = active, fill = 'Active'), alpha = 1) +
geom_col(aes(y = died, fill = 'Died-cumul'), alpha = .9) +
geom_col(aes(y = recov, fill = 'Recovered-cumul'), alpha = .5) +
scale_fill_manual(name="Legend",values=cols) +
theme(legend.position = 'top')+
facet_wrap(~loc)
p5
ggsave('epidemic-curves.svg', plot=p5, scale = 1.5)
ggsave('epidemic-curves.png', plot=p5, scale = 1.5)
source('~/Documents/covid-r-plots/data-cleanup-covid-timeseries.R', echo=TRUE)
getwd()
set("~/Documents/covid-r-plots")
setwd("~/Documents/covid-r-plots")
source('~/Documents/covid-r-plots/data-cleanup-covid-timeseries.R', echo=TRUE)
source('~/Documents/covid-r-plots/data-cleanup-covid-timeseries.R', echo=TRUE)
source('~/Documents/covid-r-plots/plots-covid-timeseries.R', echo=TRUE)
sessionInfo()
source('~/Documents/covid-r-plots/plots-covid-timeseries.R', echo=TRUE)
source('~/Documents/covid-r-plots/plots-covid-timeseries.R', echo=TRUE)
library(ggplot2)
source('~/Documents/covid-r-plots/plots-covid-timeseries.R', echo=TRUE)
source('~/Documents/covid-r-plots/plots-covid-timeseries.R', echo=TRUE)
ggsave(plot = p1, scale = 1.75, filename = paste0('conf_cases_after_', thresh_pat, 'th_patient.png'))
ggsave(plot = p1, scale = 2, filename = paste0('conf_cases_after_', thresh_pat, 'th_patient.svg'))
ggsave(plot = p1, scale = 2, filename = paste0('conf_cases_after_', thresh_pat, 'th_patient.png'))
source('~/Documents/covid-r-plots/plots-covid-timeseries.R', echo=TRUE)
