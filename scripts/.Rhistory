stats_ADCvBAS <- topTable(fit2, coef = "ADCvBAS", number = nrow(fit2), sort.by = "none")
hist(stats_ADCvBAS[, "P.Value"], main = "ADCvBAS")
stats_ADCvCARCI <- topTable(fit2, coef = "ADCvCARCI", number = nrow(fit2), sort.by = "none")
hist(stats_ADCvCARCI[, "P.Value"], main = "ADCvCARCI")
stats_ADCvLCC <- topTable(fit2, coef = "ADCvLCC", number = nrow(fit2), sort.by = "none")
hist(stats_ADCvLCC[, "P.Value"], main = "ADCvLCC")
stats_ADCvLCNE <- topTable(fit2, coef = "ADCvLCNE", number = nrow(fit2), sort.by = "none")
hist(stats_ADCvLCNE[, "P.Value"], main = "ADCvLCNE")
stats_ADCvNTL <- topTable(fit2, coef = "ADCvNTL", number = nrow(fit2), sort.by = "none")
hist(stats_ADCvNTL[, "P.Value"], main = "ADCvNTL")
stats_ADCvOther <- topTable(fit2, coef = "ADCvOther", number = nrow(fit2), sort.by = "none")
hist(stats_ADCvOther[, "P.Value"], main = "ADCvOther")
stats_ADCvSCC <- topTable(fit2, coef = "ADCvSCC", number = nrow(fit2), sort.by = "none")
hist(stats_ADCvSCC[, "P.Value"], main = "ADCvSCC")
stats_ADCvSQC <- topTable(fit2, coef = "ADCvSQC", number = nrow(fit2), sort.by = "none")
hist(stats_ADCvSQC[, "P.Value"], main = "ADCvSQC")
par(mfrow = c(1,1))
volcanoplot(fit2, coef = "ADCvSCC", highlight = 5,
names = fit2$genes[,"gene_names"], main = "ADCvSCC") #volcano plot which shows the names of the top 5 genes
filtered_list_DEresults <-
lapply(X = list_DEresults, function(x) filter(
x,logFC >= 1 & adj.P.Val <= 0.01 | logFC <= -1 & adj.P.Val <= 0.01))
filtered_ADCvBAS_dataframe <- filtered_list_DEresults[[1]]
filtered_ADCvCARCI_dataframe <- filtered_list_DEresults[[2]]
filtered_ADCvLCC_dataframe <- filtered_list_DEresults[[3]]
filtered_ADCvLCNE_dataframe <- filtered_list_DEresults[[4]]
filtered_ADCvNTL_dataframe <- filtered_list_DEresults[[5]]
filtered_ADCvOther_dataframe <- filtered_list_DEresults[[6]]
filtered_ADCvSCC_dataframe <- filtered_list_DEresults[[7]]
filtered_ADCvSQC_dataframe <- filtered_list_DEresults[[8]]
#filter for the genes which might have the biggest impact on prognosis
#create data frame relevant_genes that contains the names of the genes that are differentially expressed in all the significant comparisons
relevant_genes <- intersect(filtered_ADCvBAS_dataframe$gene_names,
filtered_ADCvCARCI_dataframe$gene_names)
relevant_genes = intersect(relevant_genes, filtered_ADCvLCNE_dataframe$gene_names)
relevant_genes = intersect(relevant_genes, filtered_ADCvNTL_dataframe$gene_names)
relevant_genes = intersect(relevant_genes, filtered_ADCvSCC_dataframe$gene_names)
relevant_genes = intersect(relevant_genes, filtered_ADCvSQC_dataframe$gene_names)
#data frames containing the results of the comparisons with genes in alphabetical order
ADCvBAS_dataframe2 <-topTable(fit2, coef = "ADCvBAS", number = nrow(fit2),
sort.by = "none")
ADCvCARCI_dataframe2 <- topTable(fit2, coef = "ADCvCARCI", number = nrow(fit2),
sort.by = "none")
ADCvLCC_dataframe2 <- topTable(fit2, coef = "ADCvLCC", number = nrow(fit2),
sort.by = "none")
ADCvLCNE_dataframe2 <- topTable(fit2, coef = "ADCvLCNE", number = nrow(fit2),
sort.by = "none")
ADCvNTL_dataframe2 <- topTable(fit2, coef = "ADCvNTL", number = nrow(fit2),
sort.by = "none")
ADCvOther_dataframe2 <- topTable(fit2, coef = "ADCvOther", number = nrow(fit2),
sort.by = "none")
ADCvSCC_dataframe2 <- topTable(fit2, coef = "ADCvSCC", number = nrow(fit2),
sort.by = "none")
ADCvSQC_dataframe2 <- topTable(fit2, coef = "ADCvSQC", number = nrow(fit2),
sort.by = "none")
#create data frame with the logFCs of the selected genes
relevant_genes_dataframe <- data.frame(ADCvBAS = ADCvBAS_dataframe2$logFC,
ADCvCARCI = ADCvCARCI_dataframe2$logFC,
ADCvLCNE = ADCvLCNE_dataframe2$logFC,
ADCvSCC = ADCvSCC_dataframe2$logFC,
ADCvSQC = ADCvSQC_dataframe2$logFC,
ADCvNTL = ADCvNTL_dataframe2$logFC)
rownames(relevant_genes_dataframe) <- rownames(ADCvBAS_dataframe2)
relevant_genes_dataframe <- relevant_genes_dataframe[relevant_genes,]
#create data frame relevant_genes that contains the names of the genes that are differentially expressed in all the significant comparisons
relevant_genes <- intersect(filtered_ADCvBAS_dataframe$gene_names,
filtered_ADCvCARCI_dataframe$gene_names)
relevant_genes = intersect(relevant_genes, filtered_ADCvLCNE_dataframe$gene_names)
relevant_genes = intersect(relevant_genes, filtered_ADCvNTL_dataframe$gene_names)
relevant_genes = intersect(relevant_genes, filtered_ADCvSCC_dataframe$gene_names)
relevant_genes = intersect(relevant_genes, filtered_ADCvSQC_dataframe$gene_names)
#data frames containing the results of the comparisons with genes in alphabetical order
ADCvBAS_dataframe2 <-topTable(fit2, coef = "ADCvBAS", number = nrow(fit2),
sort.by = "none")
ADCvCARCI_dataframe2 <- topTable(fit2, coef = "ADCvCARCI", number = nrow(fit2),
sort.by = "none")
ADCvLCC_dataframe2 <- topTable(fit2, coef = "ADCvLCC", number = nrow(fit2),
sort.by = "none")
ADCvLCNE_dataframe2 <- topTable(fit2, coef = "ADCvLCNE", number = nrow(fit2),
sort.by = "none")
ADCvNTL_dataframe2 <- topTable(fit2, coef = "ADCvNTL", number = nrow(fit2),
sort.by = "none")
ADCvOther_dataframe2 <- topTable(fit2, coef = "ADCvOther", number = nrow(fit2),
sort.by = "none")
ADCvSCC_dataframe2 <- topTable(fit2, coef = "ADCvSCC", number = nrow(fit2),
sort.by = "none")
ADCvSQC_dataframe2 <- topTable(fit2, coef = "ADCvSQC", number = nrow(fit2),
sort.by = "none")
#create data frame with the logFCs of the selected genes
relevant_genes_dataframe <- data.frame(ADCvBAS = ADCvBAS_dataframe2$logFC,
ADCvCARCI = ADCvCARCI_dataframe2$logFC,
ADCvLCNE = ADCvLCNE_dataframe2$logFC,
ADCvSCC = ADCvSCC_dataframe2$logFC,
ADCvSQC = ADCvSQC_dataframe2$logFC,
ADCvNTL = ADCvNTL_dataframe2$logFC)
rownames(relevant_genes_dataframe) <- rownames(ADCvBAS_dataframe2)
relevant_genes_dataframe <- relevant_genes_dataframe[relevant_genes,]
relevant_results <- results_dataframe[relevant_genes,]
relevant_results_histo <- subset(relevant_results, select = -c(ADCvNTL, ADCvOther,ADCvLCC))
relevant_results_histo_values <- as.data.frame(cbind(rownames(relevant_results_histo),
(rowSums(relevant_results_histo))))
relevant_results_histo_values$V2 <- as.numeric(as.character(relevant_results_histo_values$V2))#data frame that contains the informations needed for further selection of the genes
characteristic_genes_up <- filter(relevant_results_histo_values, V2 == 5)
rownames(characteristic_genes_up) <- characteristic_genes_up[,1] #data frame containing the genes that are up-regulated in all the significant comparisons with the other histologies
characteristic_genes_down <- filter(relevant_results_histo_values, V2 == -5) #data frame containing the genes that are down-regulated in all the significant comparisons with the other histologies
characteristic_genes_up_logFC <- relevant_genes_dataframe[rownames(characteristic_genes_up),] #data frame with the logFCs of the characteristic genes
knitr::kable(characteristic_genes_up_logFC[1:8, ], caption = "Table 4: Excerpt of characteristic genes logFC values")
#built data frame with relevant gene expression and sample info of ADC
rev_patients <- t(rexpression_dataframe[rownames(characteristic_genes_up),])
rev_patients <- cbind(rev_patients,age = rsample_infos$age)
rev_patients <- rev_patients[rsample_infos$hystology == "ADC",] # select all rows with the ADC histology
rev_patients.df <- data.frame (rev_patients)
#test if data is normally distributed
X = 0
for (i in c(1:ncol(rev_patients))){
name= colnames(rev_patients)[i]
p = shapiro.test(rev_patients[,i])[["p.value"]]
if (p>0.05){
X=X+1 # normally distributed
}
X == ncol(rev_patients)
#spearman correlation
correlation <- rcorr(rev_patients,type= "spearman") # executing a spearman correlation calculation
cor <- correlation[["r"]] # creating a correlation matrix
p_value <- round(correlation[["P"]], 3) # selecting all p-values
#get correlations and p-values of correlation with age
cor_age <- cor[29,-29]
dim(cor)
View(cor)
cor['age',-which(colnames(cor) == 'age')]
p_value['age',-which(colnames(cor) == 'age')]
#get correlations and p-values of correlation with age
cor_age <- cor['age',-which(colnames(cor) == 'age')]
p_value_age <- p_value['age',-which(colnames(cor) == 'age')]
#filter for significant correlations, significant value is 0.05
sig_age_genes <- names(p_value_age[p_value_age<= 0.05])
cor_sig_age <- data.frame(correlation = cor_age[sig_age_genes])
knitr::kable(cor_sig_age, caption = "Table 5: Genes correlated to age with correlation coefficient")
rev_patients <- t(rexpression_dataframe[characteristic_genes_up$V1,]) # make data frame with expression of characteristic genes
rev_all_sample <- cbind(rev_patients, gender = rsample_infos$gender,
relapse = rsample_infos$relapse,
Tobacco = rsample_infos$tobacco,
TP53 = rsample_infos$TP53)# add some of the clinical data to the data frame
rev_all_sample <- rev_all_sample[rsample_infos$hystology == "ADC",] # reduce the data frame to only ADC patients
rev_all_sample.df <- data.frame(rev_all_sample, stringsAsFactors = FALSE)
rev_patients <- t(rexpression_dataframe[characteristic_genes_up$V1,]) # make data frame with expression of characteristic genes
rev_all_sample <- cbind(rev_patients, gender = rsample_infos$gender,
relapse = rsample_infos$relapse,
Tobacco = rsample_infos$tobacco,
TP53 = rsample_infos$TP53)# add some of the clinical data to the data frame
rev_all_sample <- rev_all_sample[rsample_infos$hystology == "ADC",] # reduce the data frame to only ADC patients
rev_all_sample.df <- data.frame(rev_all_sample, stringsAsFactors = FALSE)
krusk.pmat <- function(x, ...) { # Compute Kruskal-Wallis test for the whole data frame
mat <- as.matrix(x)
n <- ncol(mat)
p.mat<- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- kruskal.test(mat[, i], mat[, j], ...)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
kruskal_pvalues <- data.frame(krusk.pmat(rev_all_sample.df)) #Create data frame containing only the p-values of the Kruskal-Wallis matrix
kruskal_visual <- kruskal_pvalues[29:ncol(kruskal_pvalues), 1:28] # Adapt data frame for visualization in a heatmap
kruskal_visual[kruskal_visual > 0.05] <- 0.3
kruskal_visual[kruskal_visual <= 0.05 ] <- 1
pheatmap(as.matrix(kruskal_visual), # visualize significant tests in heatmap
drop_levels = TRUE,
color = inferno(10),
fontsize = 15,
cluster_cols=FALSE,
cluster_rows= FALSE,
legend = FALSE)
# ADC Sample_infos
ADC_sample_infos <- rsample_infos[rsample_infos$hystology=="ADC",]
ADC_sample_infos <- cbind(ADC_sample_infos,event =c(1:85))# event is relapse or death
for(i in c(1:nrow(ADC_sample_infos))){ # censoring is added to the data frame ADC_sample_infos
if(ADC_sample_infos$status[i]=="ALIVE"){
ADC_sample_infos$event[i]=0
}else{
ADC_sample_infos$event[i]=1
}
surv_object <- Surv(time=ADC_sample_infos$follow_up_time, event = ADC_sample_infos$event)
#genes
ADC_sample_infos <- cbind(ADC_sample_infos,t(rexpression_dataframe)[1:85,rownames(characteristic_genes_up)]) # add gene expression data from ADC samples to clinical data
means <- rowMeans(rexpression_dataframe[rownames(characteristic_genes_up),273:286]) # calculating the mean values
sd <- apply(rexpression_dataframe[rownames(characteristic_genes_up),273:286],1,sd) # calculating the standard deviation
threshold <- log2(2^means+2*2^sd)
NTL_means <- data.frame(means,sd,threshold)
for (i in c(18:ncol(ADC_sample_infos))){
gene = colnames(ADC_sample_infos)[i]
th = NTL_means[gene, 3]
for (j in c(1:nrow(ADC_sample_infos))){
if (ADC_sample_infos[j,gene]>=th){
ADC_sample_infos[j,gene] = 1
}else{
ADC_sample_infos[j,gene] = 0
}
#PEBP4
fit <- survfit(surv_object ~ PEBP4, data = ADC_sample_infos) # fitting the survival model
PEBP4 <- ggsurvplot (fit,data = ADC_sample_infos, pval = TRUE, title = "PEBP4",fontsize = 5)
krusk.pmat <- function(x, ...) { # Compute Kruskal-Wallis test for the whole data frame
mat <- as.matrix(x)
n <- ncol(mat)
p.mat<- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- kruskal.test(mat[, i], mat[, j], ...)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
kruskal_pvalues <- data.frame(krusk.pmat(rev_all_sample.df)) #Create data frame containing only the p-values of the Kruskal-Wallis matrix
kruskal_visual <- kruskal_pvalues[29:ncol(kruskal_pvalues), 1:28] # Adapt data frame for visualization in a heatmap
kruskal_visual[kruskal_visual > 0.05] <- 0.3
kruskal_visual[kruskal_visual <= 0.05 ] <- 1
pheatmap(as.matrix(kruskal_visual), # visualize significant tests in heatmap
drop_levels = TRUE,
color = inferno(10),
fontsize = 15,
cluster_cols=FALSE,
cluster_rows= FALSE,
legend = FALSE)
rev_all_sample.df
View(rev_all_sample.df)
1 > 2 & 2 > 3 | 3 > 2 & 2 < 2
1 > 2 & 3 > 2 | 3 > 2 & 2 < 2
2 > 1 & 3 > 2 | 3 > 2 & 2 < 2
# ADC Sample_infos
ADC_sample_infos <- rsample_infos[rsample_infos$hystology=="ADC",]
ADC_sample_infos <- cbind(ADC_sample_infos,event =c(1:85))# event is relapse or death
for(i in c(1:nrow(ADC_sample_infos))){ # censoring is added to the data frame ADC_sample_infos
if(ADC_sample_infos$status[i]=="ALIVE"){
ADC_sample_infos$event[i]=0
}else{
ADC_sample_infos$event[i]=1
}
surv_object <- Surv(time=ADC_sample_infos$follow_up_time, event = ADC_sample_infos$event)
#genes
ADC_sample_infos <- cbind(ADC_sample_infos,t(rexpression_dataframe)[1:85,rownames(characteristic_genes_up)]) # add gene expression data from ADC samples to clinical data
means <- rowMeans(2^rexpression_dataframe[rownames(characteristic_genes_up),273:286]) # calculating the mean values
2^rexpression_dataframe[rownames(characteristic_genes_up),273:286]
rexpression_dataframe[rownames(characteristic_genes_up),273:286]
2**rexpression_dataframe[rownames(characteristic_genes_up),273:286]
rexpression_dataframe[rownames(characteristic_genes_up),273]
2^rexpression_dataframe[rownames(characteristic_genes_up),273]
2**rexpression_dataframe[rownames(characteristic_genes_up),273]
#genes
ADC_sample_infos <- cbind(ADC_sample_infos,t(rexpression_dataframe)[1:85,rownames(characteristic_genes_up)]) # add gene expression data from ADC samples to clinical data
means <- rowMeans(2**rexpression_dataframe[rownames(characteristic_genes_up),273:286]) # calculating the mean values
sd <- apply(2**rexpression_dataframe[rownames(characteristic_genes_up),273:286],1,sd) # calculating the standard deviation
threshold <- log2(means+2*sd)
NTL_means <- data.frame(means,sd,threshold)
for (i in c(18:ncol(ADC_sample_infos))){
gene = colnames(ADC_sample_infos)[i]
th = NTL_means[gene, 3]
for (j in c(1:nrow(ADC_sample_infos))){
if (ADC_sample_infos[j,gene]>=th){
ADC_sample_infos[j,gene] = 1
}else{
ADC_sample_infos[j,gene] = 0
}
#PEBP4
fit <- survfit(surv_object ~ PEBP4, data = ADC_sample_infos) # fitting the survival model
PEBP4 <- ggsurvplot (fit,data = ADC_sample_infos, pval = TRUE, title = "PEBP4",fontsize = 5)
??ggsurvplot
install.packages("survival")
#required packages
#if (!requireNamespace("BiocManager", quietly = TRUE))
#  install.packages("BiocManager")
#BiocManager::install("limma")
#BiocManager::install("Biobase")
#BiocManager::install("fgsea")
library(limma)
library(Biobase)
library(fgsea)
#install.packages("ggplot2")
library(ggplot2)
#install.packages("tidyverse")
library(tidyverse)
# ADC Sample_infos
ADC_sample_infos <- rsample_infos[rsample_infos$hystology=="ADC",]
ADC_sample_infos <- cbind(ADC_sample_infos,event =c(1:85))# event is relapse or death
for(i in c(1:nrow(ADC_sample_infos))){ # censoring is added to the data frame ADC_sample_infos
if(ADC_sample_infos$status[i]=="ALIVE"){
ADC_sample_infos$event[i]=0
}else{
ADC_sample_infos$event[i]=1
}
surv_object <- Surv(time=ADC_sample_infos$follow_up_time, event = ADC_sample_infos$event)
#install.packages("survival")
library("survival")
#required packages
#if (!requireNamespace("BiocManager", quietly = TRUE))
#  install.packages("BiocManager")
#BiocManager::install("limma")
#BiocManager::install("Biobase")
#BiocManager::install("fgsea")
library(limma)
library(Biobase)
library(fgsea)
#install.packages("ggplot2")
library(ggplot2)
#install.packages("tidyverse")
library(tidyverse)
library(dplyr)
#install_github("vqv/ggbiplot")
library("ggbiplot")
#install_github("vqv/ggbiplot")
library("ggbiplot")
library(stringr)
#install.packages("RColorBrewer")
library("RColorBrewer")
library(stringr)
#install.packages("RColorBrewer")
library("RColorBrewer")
#install.packages("viridis")
library(viridis)
knitr::opts_chunk$set(fig.align = "center", fig.pos = "H")
# ADC Sample_infos
ADC_sample_infos <- rsample_infos[rsample_infos$hystology=="ADC",]
ADC_sample_infos <- cbind(ADC_sample_infos,event =c(1:85))# event is relapse or death
for(i in c(1:nrow(ADC_sample_infos))){ # censoring is added to the data frame ADC_sample_infos
if(ADC_sample_infos$status[i]=="ALIVE"){
ADC_sample_infos$event[i]=0
}else{
ADC_sample_infos$event[i]=1
}
surv_object <- Surv(time=ADC_sample_infos$follow_up_time, event = ADC_sample_infos$event)
#genes
ADC_sample_infos <- cbind(ADC_sample_infos,t(rexpression_dataframe)[1:85,rownames(characteristic_genes_up)]) # add gene expression data from ADC samples to clinical data
means <- rowMeans(2**rexpression_dataframe[rownames(characteristic_genes_up),273:286]) # calculating the mean values
sd <- apply(2**rexpression_dataframe[rownames(characteristic_genes_up),273:286],1,sd) # calculating the standard deviation
threshold <- log2(means+2*sd)
NTL_means <- data.frame(means,sd,threshold)
for (i in c(18:ncol(ADC_sample_infos))){
gene = colnames(ADC_sample_infos)[i]
th = NTL_means[gene, 3]
for (j in c(1:nrow(ADC_sample_infos))){
if (ADC_sample_infos[j,gene]>=th){
ADC_sample_infos[j,gene] = 1
}else{
ADC_sample_infos[j,gene] = 0
}
#PEBP4
fit <- survfit(surv_object ~ PEBP4, data = ADC_sample_infos) # fitting the survival model
PEBP4 <- ggsurvplot (fit,data = ADC_sample_infos, pval = TRUE, title = "PEBP4",fontsize = 5)
install.packages("survminer")
#install.packages("survminer")
library("survminer")
#genes
ADC_sample_infos <- cbind(ADC_sample_infos,t(rexpression_dataframe)[1:85,rownames(characteristic_genes_up)]) # add gene expression data from ADC samples to clinical data
means <- rowMeans(2**rexpression_dataframe[rownames(characteristic_genes_up),273:286]) # calculating the mean values
sd <- apply(2**rexpression_dataframe[rownames(characteristic_genes_up),273:286],1,sd) # calculating the standard deviation
threshold <- log2(means+2*sd)
NTL_means <- data.frame(means,sd,threshold)
for (i in c(18:ncol(ADC_sample_infos))){
gene = colnames(ADC_sample_infos)[i]
th = NTL_means[gene, 3]
for (j in c(1:nrow(ADC_sample_infos))){
if (ADC_sample_infos[j,gene]>=th){
ADC_sample_infos[j,gene] = 1
}else{
ADC_sample_infos[j,gene] = 0
}
#PEBP4
fit <- survfit(surv_object ~ PEBP4, data = ADC_sample_infos) # fitting the survival model
PEBP4 <- ggsurvplot (fit,data = ADC_sample_infos, pval = TRUE, title = "PEBP4",fontsize = 5)
#LRRK2
fit <- survfit(surv_object ~ LRRK2, data = ADC_sample_infos)
LRRK2 <- ggsurvplot (fit,data = ADC_sample_infos, pval = TRUE, title = "LRKK2",fontsize = 5)
#ZNF385B
fit <- survfit(surv_object ~ ZNF385B, data = ADC_sample_infos)
ZNF385B <- ggsurvplot (fit,data = ADC_sample_infos, pval = TRUE, title = "ZNF385B",fontsize = 5)
#SFTA1P
fit <- survfit(surv_object ~ SFTA1P, data = ADC_sample_infos)
SFTA1P <- ggsurvplot (fit,data = ADC_sample_infos, pval = TRUE, title = "SFTA1P",fontsize = 5)
list_genes <- list(PEBP4, LRRK2, ZNF385B, SFTA1P)
arrange_ggsurvplots(list_genes, ncol = 2, nrow = 2)
#genes
ADC_sample_infos <- cbind(ADC_sample_infos,t(rexpression_dataframe)[1:85,rownames(characteristic_genes_up)]) # add gene expression data from ADC samples to clinical data
means <- rowMeans(2**rexpression_dataframe[rownames(characteristic_genes_up),273:286]) # calculating the mean values
sd <- apply(2**rexpression_dataframe[rownames(characteristic_genes_up),273:286],1,sd) # calculating the standard deviation
threshold <- log2(means+2*sd)
NTL_means <- data.frame(means,sd,threshold)
for (i in c(18:ncol(ADC_sample_infos))){
gene = colnames(ADC_sample_infos)[i]
th = NTL_means[gene, 3]
for (j in c(1:nrow(ADC_sample_infos))){
if (ADC_sample_infos[j,gene]>=th){
ADC_sample_infos[j,gene] = 1
}else{
ADC_sample_infos[j,gene] = 0
}
#PEBP4
fit <- survfit(surv_object ~ PEBP4, data = ADC_sample_infos) # fitting the survival model
PEBP4 <- ggsurvplot (fit,data = ADC_sample_infos, pval = TRUE, title = "PEBP4",fontsize = 5)
#LRRK2
fit <- survfit(surv_object ~ LRRK2, data = ADC_sample_infos)
LRRK2 <- ggsurvplot (fit,data = ADC_sample_infos, pval = TRUE, title = "LRKK2",fontsize = 5)
#ZNF385B
fit <- survfit(surv_object ~ ZNF385B, data = ADC_sample_infos)
ZNF385B <- ggsurvplot (fit,data = ADC_sample_infos, pval = TRUE, title = "ZNF385B",fontsize = 5)
#SFTA1P
fit <- survfit(surv_object ~ SFTA1P, data = ADC_sample_infos)
SFTA1P <- ggsurvplot (fit,data = ADC_sample_infos, pval = TRUE, title = "SFTA1P",fontsize = 5)
list_genes <- list(PEBP4, LRRK2, ZNF385B, SFTA1P)
arrange_ggsurvplots(list_genes, ncol = 2, nrow = 2)
View(ADC_sample_infos)
#genes
ADC_sample_infos <- cbind(ADC_sample_infos,t(rexpression_dataframe)[1:85,rownames(characteristic_genes_up)]) # add gene expression data from ADC samples to clinical data
View(ADC_sample_infos)
means <- rowMeans(2**rexpression_dataframe[rownames(characteristic_genes_up),273:286]) # calculating the mean values
sd <- apply(2**rexpression_dataframe[rownames(characteristic_genes_up),273:286],1,sd) # calculating the standard deviation
threshold <- log2(means+2*sd)
NTL_means <- data.frame(means,sd,threshold)
View(NTL_means)
for (i in c(18:ncol(ADC_sample_infos))){
gene = colnames(ADC_sample_infos)[i]
th = NTL_means[gene, 3]
for (j in c(1:nrow(ADC_sample_infos))){
if (ADC_sample_infos[j,gene]>=th){
ADC_sample_infos[j,gene] = 1
}else{
ADC_sample_infos[j,gene] = 0
}
View(ADC_sample_infos)
#genes
ADC_sample_infos <- cbind(ADC_sample_infos,t(rexpression_dataframe)[1:85,rownames(characteristic_genes_up)]) # add gene expression data from ADC samples to clinical data
ncol(ADC_sample_infos)
i = 19
colnames(ADC_sample_infos)[i]
NTL_means[gene, 3]
j = 2
ADC_sample_infos[j,gene]
any(duplicate(colnames(ADC_sample_infos)))
any(duplicates(colnames(ADC_sample_infos)))
any(duplicated(colnames(ADC_sample_infos)))
duplicated(colnames(ADC_sample_infos))[colnames(ADC_sample_infos)]
colnames(ADC_sample_infos)[duplicated(colnames(ADC_sample_infos))]
knitr::opts_chunk$set(echo = TRUE)
BiocManager::install("Biobase")
knitr::opts_chunk$set(echo = TRUE)
#BiocManager::install("Biobase")
#BiocManager::install("limma")
#BiocManager::install('EnhancedVolcano')
library(ggplot2)
library(Biobase)
library(limma)
library(ggrepel)
library(EnhancedVolcano)
library(broom)
library(tidyr)
library(readr)
library(cluster)
#BiocManager::install("Biobase")
#BiocManager::install("limma")
#BiocManager::install('EnhancedVolcano')
library(ggplot2)
library(Biobase)
library(limma)
library(ggrepel)
library(EnhancedVolcano)
ntldat<- read.csv("nontumourlungdat.csv")
squamdat <- read.csv("squamdat.csv")
sample_infos_squam <- read.csv("sample_infos_squam.csv")
ntldat.mat <- as.matrix(ntldat[,-1])
rnames <- ntldat$X
rownames(ntldat.mat) <- rnames
squamdat.mat <- as.matrix(squamdat[,-1])
rnames2 <- squamdat$X
rownames(squamdat.mat) <- rnames2
sample_info_squam <- sample_infos_squam[,-1]
rnames_sample_info <- sample_infos_squam$title
rownames(sample_info_squam) <- rnames_sample_info
#putting the data into one matrix
alldata.mat <- rbind(squamdat.mat, ntldat.mat)
squam.means.df <- colMeans(squamdat.mat)
ntl.means.df <- colMeans(ntldat.mat)
#Plot the mean of every gene in both datasets as histograms
par(mfrow = c(2,1))
hist(ntl.means.df, main = "Distribution of means for nontumoral cells", xlab = "mean",
breaks = 24)
hist(squam.means.df, main = "Distribution of means for tumoral cells", xlab = "mean",
breaks = 24)
squam.means.df <- colMeans(squamdat.mat)
ntl.means.df <- colMeans(ntldat.mat)
#Plot the mean of every gene in both datasets as histograms
par(mfrow = c(1,2))
hist(ntl.means.df, main = "Distribution of means for nontumoral cells", xlab = "mean",
breaks = 24)
hist(squam.means.df, main = "Distribution of means for tumoral cells", xlab = "mean",
breaks = 24)
squam.means.df <- colMeans(squamdat.mat)
ntl.means.df <- colMeans(ntldat.mat)
#Plot the mean of every gene in both datasets as histograms
hist(ntl.means.df, main = "Distribution of means for nontumoral cells", xlab = "mean",
breaks = 24)
hist(squam.means.df, main = "Distribution of means for tumoral cells", xlab = "mean",
breaks = 24)
View(squamdat)
?topTable
??enhancedvolcanoplot
quantile(rnorm(250))
toString(1)
toString(1**2)
toString(5**2)
