print(i)
delta[i] <- y[i] - y[(i-1)]
}
for (i in 1:length(x)) delta[i] <- y[i] - y[(i-1)]
for (i in 1:length(x)) print(i) ; delta[i] <- y[i] - y[(i-1)]
delta
delta <- vector(length = length(x))
for (i in 1:length(x)) print(i) ; delta[i] <- y[i] - y[(i-1)] ; print(delta[i])
for (i in 1:length(x)) print(y[i] - y[(i-1)])
delta <- vector(length = length(x))
for (i in 1:length(x)) delta[[i]] <- y[i] - y[(i-1)]
as.numeric(y[1] - y[0])
y[0]
as.numeric(y[0])
class(y[0])
length(y[0])
length(y[1])
for (i in 1:length(x)) delta[[i]] <- y[i] - y[(i-1)]
for (i in 1:length(x) - 1) delta[[i]] <- y[i+1] - y[(i)]
for (i in 1:(length(x) - 1)) delta[[i]] <- y[i+1] - y[i]
delta
y
1:(length(x) - 1)
for (i in 1:(length(x) - 1)) delta[[i]] <- y[(i+1)] - y[i]
delta
y[(6+1)]
y[(6+1)] - y[6]
delta <- vector(length = length(x) - 1)
for (i in 1:(length(x) - 1)) delta[[i]] <- y[(i+1)] - y[i]
plot(x, y, type = "l")
plot(x, delta, type = "l")
source('~/Documents/R/GBP-EUR.R', echo=TRUE)
source('~/Documents/R/GBP-EUR.R', echo=TRUE)
if (dateticks[length(dateticks)] == length(dateticks)) print("skere")
dateticks[length(dateticks)]
length(dateticks)
length(dates)
dateticks[length(dateticks)]
if (dateticks[length(dateticks)] != length(dates)) dateticks <- c(dateticks, length(dates))
dateticks
dates <- as.Date(rownames(pound))
dateticks <- seq(1, length(dates), 7)
if (dateticks[length(dateticks)] != length(dates)) dateticks <- c(dateticks, length(dates))
datelabs <- dates[dateticks]
plot(seq_along(dates), pound, type = "l", xaxt = "n", xlab = "", ylab = "EUR to GBP")
axis(side = 1, at = dateticks, labels = F)
text(x = (dateticks - 5), y = (0.99 * par("usr")[3]), labels = datelabs, srt = 45, cex=1, xpd=TRUE,)
dates <- as.Date(rownames(pound))
dateticks <- seq(1, length(dates), 7)
if (dateticks[length(dateticks)] != length(dates)) dateticks <- c(dateticks, length(dates))
datelabs <- dates[dateticks]
plot(seq_along(dates), pound, type = "l", xaxt = "n", xlab = "", ylab = "EUR to GBP")
axis(side = 1, at = dateticks, labels = F)
text(x = (dateticks - 5), y = (0.99 * par("usr")[3]), labels = datelabs, srt = 45, cex=1, xpd=TRUE,)
dates <- as.Date(rownames(pound))
dateticks <- seq(1, length(dates), 7)
datelabs <- dates[dateticks]
plot(seq_along(dates), pound, type = "l", xaxt = "n", xlab = "", ylab = "EUR to GBP")
axis(side = 1, at = dateticks, labels = F)
text(x = (dateticks - 5), y = (0.99 * par("usr")[3]), labels = datelabs, srt = 45, cex=1, xpd=TRUE,)
#axis.Date(side = 1, at = datelabs, srt = 45, format = "%D")
abline(h = length(dates), lty = 2)
abline(v = length(dates), lty = 2)
pound[nrow(pound)]
tail(pund)
tail(pound)
abline(h = pound[nrow(pound)], lty = 2)
plot(seq_along(dates), pound, type = "l", xaxt = "n", xlab = "", ylab = "EUR to GBP")
axis(side = 1, at = dateticks, labels = F)
text(x = (dateticks - 5), y = (0.99 * par("usr")[3]), labels = datelabs, srt = 45, cex=1, xpd=TRUE,)
abline(h = pound[nrow(pound)], lty = 2)
text(x = 10, y = 1.1 * pound[nrow(pound)],
labels = paste("Value on day:", dates[length(dates)]))
1.1 * pound[nrow(pound)]
text(x = 10, y = 1.05 * pound[nrow(pound)],
labels = paste("Value on day:", dates[length(dates)]))
text(x = 10, y = 1.005 * pound[nrow(pound)],
labels = paste("Value on day:", dates[length(dates)]))
text(x = 10, y = pound[nrow(pound)],
labels = paste("Value on day:", dates[length(dates)]))
plot(seq_along(dates), pound, type = "l", xaxt = "n", xlab = "", ylab = "EUR to GBP")
axis(side = 1, at = dateticks, labels = F)
text(x = (dateticks - 5), y = (0.99 * par("usr")[3]), labels = datelabs, srt = 45, cex=1, xpd=TRUE,)
abline(h = pound[nrow(pound)], lty = 2)
text(x = 10, y = pound[nrow(pound)],
labels = paste("Value on day:", dates[length(dates)]))
?text
plot(seq_along(dates), pound, type = "l", xaxt = "n", xlab = "", ylab = "EUR to GBP")
axis(side = 1, at = dateticks, labels = F)
text(x = (dateticks - 5), y = (0.99 * par("usr")[3]), labels = datelabs, srt = 45, cex=1, xpd=TRUE,)
abline(h = pound[nrow(pound)], lty = 2)
text(x = 10, y = pound[nrow(pound)], adj = c(0.5, 1),
labels = paste("Value on day:", dates[length(dates)]))
plot(seq_along(dates), pound, type = "l", xaxt = "n", xlab = "", ylab = "EUR to GBP")
axis(side = 1, at = dateticks, labels = F)
text(x = (dateticks - 5), y = (0.99 * par("usr")[3]), labels = datelabs, srt = 45, cex=1, xpd=TRUE,)
abline(h = pound[nrow(pound)], lty = 2)
text(x = 10, y = pound[nrow(pound)], adj = c(0.5, 0),
labels = paste("Value on day:", dates[length(dates)]))
plot(seq_along(dates), pound, type = "l", xaxt = "n", xlab = "", ylab = "EUR to GBP")
axis(side = 1, at = dateticks, labels = F)
text(x = (dateticks - 5), y = (0.99 * par("usr")[3]), labels = datelabs, srt = 45, cex=1, xpd=TRUE,)
abline(h = pound[nrow(pound)], lty = 2)
text(x = 10, y = pound[nrow(pound)], adj = c(0.5, 0), pos = 3,
labels = paste("Value on day:", dates[length(dates)]))
plot(seq_along(dates), pound, type = "l", xaxt = "n", xlab = "", ylab = "EUR to GBP")
axis(side = 1, at = dateticks, labels = F)
text(x = (dateticks - 5), y = (0.99 * par("usr")[3]), labels = datelabs, srt = 45, cex=1, xpd=TRUE,)
abline(h = pound[nrow(pound)], lty = 2)
text(x = 10, y = pound[nrow(pound)], pos = 3,
labels = paste("Value on day:", dates[length(dates)]))
plot(seq_along(dates), pound, type = "l", xaxt = "n", xlab = "", ylab = "EUR to GBP")
axis(side = 1, at = dateticks, labels = F)
text(x = (dateticks - 5), y = (0.99 * par("usr")[3]), labels = datelabs, srt = 45, cex=1, xpd=TRUE,)
abline(h = pound[nrow(pound)], lty = 2)
text(x = 10, y = pound[nrow(pound)], pos = 3,
labels = paste("Value on day", dates[length(dates)], ":", pound[nrow(pound)]))
plot(seq_along(dates), pound, type = "l", xaxt = "n", xlab = "", ylab = "EUR to GBP")
axis(side = 1, at = dateticks, labels = F)
text(x = (dateticks - 5), y = (0.99 * par("usr")[3]), labels = datelabs, srt = 45, cex=1, xpd=TRUE,)
abline(h = pound[nrow(pound)], lty = 2)
text(x = 20, y = pound[nrow(pound)], pos = 3,
labels = paste("Value on day", dates[length(dates)], ":", pound[nrow(pound)]))
plot(seq_along(dates), pound, type = "l", xaxt = "n", xlab = "", ylab = "EUR to GBP")
axis(side = 1, at = dateticks, labels = F)
text(x = (dateticks - 5), y = (0.99 * par("usr")[3]), labels = datelabs, srt = 45, cex=1, xpd=TRUE,)
abline(h = pound[nrow(pound)], lty = 2)
text(x = 20, y = pound[nrow(pound)], pos = 3,
labels = paste("Today's value:", pound[nrow(pound)]))
plot(seq_along(dates), pound, type = "x", xaxt = "n", xlab = "", ylab = "EUR to GBP")
plot(seq_along(dates), pound, type = "p", xaxt = "n", xlab = "", ylab = "EUR to GBP")
?plot
length(seq(-10,10,0.2))
plot(x = 1:300, y = rnorm(300), type = "n")
for (p in 0:255) points(x = p, pch = p)
points(x = 3)
warnings
warnings()
points(x = 50)
points(x = 50, y = 0)
plot(x = 1:300, y = rnorm(300), type = "n")
for (p in 0:255){
points(x = p, y = 0, pch = p)
}
plot(x = 1:300, y = rnorm(300), type = "n")
warnings
warnings()
dev,off()
dev.off()
plot(x = 1:300, y = rnorm(300), type = "n")
for (p in 0:255){
tryCatch(points(x = p, y = 0, pch = p),
warning = function(w) points(x = p, y = 0),
error = function(e) points(x = p, y = 1)
)
}
points(x = p, y = 1)
points(x = p, y = 1)
points(x = p, y = 1)
points(x = p, y = 1)
points(x = p, y = 1)
points(x = p, y = 1)
points(x = p, y = 1)
points(x = p, y = 1)
points(x = p, y = 1)
points(x = p, y = 1)
plot(x = 1:300, y = rnorm(300), type = "n")
plot(x = 1:300, y = rnorm(300), type = "n")
plot()
figure()
fig()
plot(type = "n")
plot.new()
plot(x = 1:300, y = rnorm(300), type = "n")
points(x = p, y = 1)
plot.new()
plot(x = 1:300, y = rnorm(300), type = "n")
for (p in 0:255) {
tryCatch(points(x = p, y = 0, pch = p),
warning = function(w) points(x = p, y = 0),
error = function(e) points(x = p, y = 1)
)
}
for (p in 0:255) points(x = p, y = 0, pch = 4)
for (p in 0:255) points(x = p, y = 1, pch = 4)
points(x = p, y = 1, pch = 4)
P
p
points(x = 255, y = 1, pch = 4)
for (p in 0:255) points(x = p, y = 1, pch = 4)
plot.new()
plot(x = 1:300, y = rnorm(300), type = "n")
for (p in 0:255) points(x = p, y = 1, pch = 4)
for (p in 0:255) {
tryCatch(points(x = p, y = 0, pch = p),
warning = function(w) points(x = p, y = -0.5),
error = function(e) points(x = p, y = -1)
)
}
?tryCatch
demo(error.catching)
plot.new()
plot(x = 1:30, y = rnorm(30), type = "n")
for (p in 0:30) {
tryCatch(points(x = p, y = 0, pch = p),
warning = function(w) points(x = p, y = -0.5),
error = function(e) points(x = p, y = -1)
)
}
plot.new()
dev.off()
plot.new()
plot(x = 1:30, y = rnorm(30), type = "n")
for (p in 0:30) {
tryCatch(points(x = p, y = 0, pch = p),
warning = function(w) points(x = p, y = -0.5),
error = function(e) points(x = p, y = -1)
)
}
plot.new()
dev.off()
plot.new()
plot(x = 1:30, type = "n")
for (p in 0:30) {
tryCatch(points(x = p, y = 0, pch = p),
warning = function(w) points(x = p, y = -0.5),
error = function(e) points(x = p, y = -1)
)
}
plot(x = rep(1, 30), type = "n")
plot.new()
dev.off()
plot.new()
plot(x = rep(1, 30), type = "n")
for (p in 0:30) {
tryCatch(points(x = p, y = 0, pch = p),
warning = function(w) points(x = p, y = -0.5),
error = function(e) points(x = p, y = -1)
)
}
dev.off()
plot.new()
plot(x = rep(1, 30), type = "n")
for (p in 0:30) {
tryCatch(points(x = p, y = 0, pch = p),
warning = function(w) points(x = p, y = -0.5),
error = function(e) points(x = p, y = -1)
)
}
plot(x = 1:10, type = "n")
plot(x = 1:10, type = "p")
dev.off()
plot(x = 1:10, type = "p")
dev.off()
plot(x = 1:10, type = "n")
for (p in 0:30) {
tryCatch(points(x = p, y = 0, pch = p),
warning = function(w) points(x = p, y = -0.5),
error = function(e) points(x = p, y = -1)
)
}
plot(seq_along(dates), pound, type = "p", xaxt = "n", xlab = "", ylab = "EUR to GBP", pch = 4)
plot(seq_along(dates), pound, type = "l", xaxt = "n", xlab = "", ylab = "EUR to GBP")
axis(side = 1, at = dateticks, labels = F)
text(x = (dateticks - 5), y = (0.99 * par("usr")[3]), labels = datelabs, srt = 45, cex=1, xpd=TRUE,)
abline(h = pound[nrow(pound)], lty = 2)
text(x = 20, y = pound[nrow(pound)], pos = 3,
labels = paste("Today's value:", pound[nrow(pound)]))
dev.off()
dev.off()
dev.off()
plot(seq_along(dates), pound, type = "p", xaxt = "n", xlab = "", ylab = "EUR to GBP", pch = 4)
plot(seq_along(dates), pound, type = "l", xaxt = "n", xlab = "", ylab = "EUR to GBP")
axis(side = 1, at = dateticks, labels = F)
text(x = (dateticks - 5), y = (0.99 * par("usr")[3]), labels = datelabs, srt = 45, cex=1, xpd=TRUE,)
abline(h = pound[nrow(pound)], lty = 2)
text(x = 20, y = pound[nrow(pound)], pos = 3,
labels = paste("Today's value:", pound[nrow(pound)]))
e <- NULL
dim(e) <- c(10,10)
outer
dim(e) <- c(10,10)
e <- array()
dim(e) <- c(10,10)
e <- matrix()
dim(e) <- c(10,10)
e <- matrix(ncol = 10, nrow = 10)
dim(e) <- c(10,10)
dim(e) <- c(5,20)
e
rm(e)
from = "EUR"
to = "GBP"
exc <- paste(to, from, sep = "/")
paste0(from, to)
paste0(to, from)
getSymbols(exc, from = Sys.Date() - 170, to = Sys.Date(), src = "oanda")
library(dplyr)
library(quantmod)
getSymbols(exc, from = Sys.Date() - 170, to = Sys.Date(), src = "oanda")
a <- getSymbols(exc, from = Sys.Date() - 170, to = Sys.Date(), src = "oanda", auto.assign = F)
?seq
source('~/Documents/R/GBP-EUR.R', echo=TRUE)
head(GBPEUR)
for (row in 1:nrow(GBPEUR)) {
mat <- GBPEUR[1:row, ]
exch.rate.evolution(mat)
Sys.sleep(0.5)
}
for (row in 2:nrow(GBPEUR)) {
mat <- GBPEUR[1:row, ]
exch.rate.evolution(mat)
Sys.sleep(0.5)
}
exch.rate.evolution(GBPEUR)
mat <- GBPEUR[1:row, ]
mat
head(GBPEUR, 2)
dim(mat)
dim(GBPEUR)
gbp <- as.numeric(GBPEUR)
head(gbp)
gbp <- setNames(GBPEUR, nm = rownames(GBPEUR))
gbp <- setNames(as.numeric(GBPEUR), nm = rownames(GBPEUR))
from = "EUR"
to = "GBP"
exch_xts <- getSymbols(exc, from = Sys.Date() - 170, to = Sys.Date(), src = "oanda", auto.assign = F)
exc <- paste(to, from, sep = "/")
exch_xts <- getSymbols(exc, from = Sys.Date() - 170, to = Sys.Date(), src = "oanda", auto.assign = F)
as.numeric(exch_xts)
as.matrix(exch_xts)
attr(exch_xts, date)
attr(exch_xts, "date")
attr(exch_xts, "index")
attributes(exch_xts)
library(dplyr)
library(quantmod)
exchange.history <- function(from = "EUR", to = "GBP"){
exc <- paste(to, from, sep = "/")
exch_xts <- getSymbols(exc, from = Sys.Date() - 170, to = Sys.Date(), src = "oanda", auto.assign = F)
exch_mat <- as.matrix(exch_xts)
exch_data <- setNames(as.numeric(exch_mat), nm = rownames(exch_mat))
return(exch_data)
}
exch.rate.evolution <- function(exch_vec){
dates <- as.Date(names(exch_vec))
dateticks <- seq(1, length(dates), 7)
datelabs <- dates[dateticks]
plot(seq_along(dates), exch_vec, type = "p", xaxt = "n", xlab = "", ylab = "EUR to GBP", pch = 4)
plot(seq_along(dates), exch_vec, type = "l", xaxt = "n", xlab = "", ylab = "EUR to GBP")
axis(side = 1, at = dateticks, labels = F)
text(x = (dateticks - 5), y = (0.99 * par("usr")[3]), labels = datelabs, srt = 45, cex=1, xpd=TRUE,)
abline(h = exch_vec[length(exch_vec)], lty = 2)
text(x = 20, y = exch_vec[length(exch_vec)], pos = 3,
labels = paste("Today's value:", exch_vec[length(exch_vec)]))
}
GBPEUR <- exchange.history()
exch.rate.evolution(GBPEUR)
dev.off()
for (row in 2:nrow(GBPEUR)) {
mat <- GBPEUR[1:row, ]
exch.rate.evolution(mat)
Sys.sleep(0.5)
}
for (row in 2:length(GBPEUR)) {
mat <- GBPEUR[1:row, ]
exch.rate.evolution(mat)
Sys.sleep(0.5)
}
for (row in 2:length(GBPEUR)) {
mat <- GBPEUR[1:row]
exch.rate.evolution(mat)
Sys.sleep(0.5)
}
exch.rate.evolution <- function(exch_vec){
dates <- as.Date(names(exch_vec))
dateticks <- seq(1, length(dates), 7)
datelabs <- dates[dateticks]
plot(seq_along(dates), exch_vec, type = "p", xaxt = "n", xlab = "", ylab = "EUR to GBP", pch = 4)
plot(seq_along(dates), exch_vec, type = "l", xaxt = "n", xlab = "", ylab = "EUR to GBP")
axis(side = 1, at = dateticks, labels = F)
text(x = (dateticks - 5), y = (0.99 * par("usr")[3]), labels = datelabs, srt = 45, cex=1, xpd=TRUE,)
abline(h = exch_vec[length(exch_vec)], lty = 2)
text(x = floor(0.3 * length(exch_vec)), y = exch_vec[length(exch_vec)], pos = 3,
labels = paste("Today's value:", exch_vec[length(exch_vec)]))
}
for (row in 2:length(GBPEUR)) {
mat <- GBPEUR[1:row]
exch.rate.evolution(mat)
Sys.sleep(0.2)
}
source('~/Documents/R/GBP-EUR.R', echo=TRUE)
{
for (row in 2:(length(GBPEUR) - 1)) {
mat <- GBPEUR[1:row]
exch.rate.evolution(mat, final = F)
Sys.sleep(0.1)
}
exch.rate.evolution(GBPEUR)
}
{
for (row in 2:(length(GBPEUR) - 1)) {
mat <- GBPEUR[1:row]
exch.rate.evolution(mat, final = F)
Sys.sleep(0.1)
}
exch.rate.evolution(GBPEUR)
}
{
for (row in 2:(length(GBPEUR) - 1)) {
mat <- GBPEUR[1:row]
exch.rate.evolution(mat, final = F)
Sys.sleep(0.1)
}
exch.rate.evolution(GBPEUR)
}
exch.rate.evolution(GBPEUR[1:which(GBPEUR == min(GBPEUR))])
exch.rate.evolution(GBPEUR[1:(which(GBPEUR == min(GBPEUR)) + 1)])
exch.rate.evolution(GBPEUR[1:which(GBPEUR == min(GBPEUR))])
exch.rate.evolution(GBPEUR[1:which(GBPEUR == min(GBPEUR))], final = F)
{
for (row in 2:(length(GBPEUR) - 1)) {
mat <- GBPEUR[1:row]
exch.rate.evolution(mat, final = F)
Sys.sleep(0.1)
}
exch.rate.evolution(GBPEUR)
}
exch.rate.evolution(GBPEUR)
source('~/Documents/R/GBP-EUR.R', echo=TRUE)
exch.rate(GBPEUR)
exch.rate(GBPEUR[1:which(GBPEUR == min(GBPEUR))], final = F)
# Animation
exch.rate.evolution <- function(){
for (row in 2:(length(GBPEUR) - 1)) {
mat <- GBPEUR[1:row]
exch.rate(mat, final = F)
Sys.sleep(0.1)
}
exch.rate(GBPEUR)
}
exch.rate.evolution()
quantmod::oanda.currencies
### Store many different currencies -----------------------
curs <- quantmod::oanda.currencies
head(curs)
View(curs)
### Store many different currencies -----------------------
curs <- quantmod::oanda.currencies %>%
mutate(curname = oanda.df.1.length.oanda.df...2....1.,
symbol = rownames(.))
View(curs)
### Store many different currencies -----------------------
curs <- quantmod::oanda.currencies %>%
rename(curname = oanda.df.1.length.oanda.df...2....1.) %>%
mutate(symbol = rownames(.))
head(curs)
#!/usr/bin/R
library(dplyr)
library(ggplot2)
setwd("~/Documents/covid-r-plots/scripts")
df_sub = readRDS('../RDS-data/covid-cases-timenorm-small.RDS')
days0_sub = readRDS('../RDS-data/covid-day0-small.RDS')
metadata = file.info('../RDS-data/covid-cases-timenorm-small.RDS')
thresh_pat = 100
if(as.Date(metadata$mtime) != Sys.Date()){
source('data-cleanup-covid-timeseries.r')
}
df_labels = df_sub %>% group_by(loc) %>%
summarise(conf = max(conf), maxtimediff = max(timenorm),
growth_con_1 = max(growth_con_1, na.rm = T),
growth_con_5 = max(growth_con_5, na.rm = T),
latestday = max(time_base)) %>%
mutate(day0 = days0_sub$day0)
cols = c('Active' = '#E08B00', 'Recovered-cumul' = '#7CAE00', 'Died-cumul' = 'red', 'Total-cumul' = 'darkgrey')
p5 = ggplot(df_sub, aes(x = timenorm_num)) +
geom_col(aes(y = recov, fill = 'Recovered-cumul'), alpha = .7) +
geom_col(aes(y = active, fill = 'Active'), alpha = .7) +
geom_col(aes(y = died, fill = 'Died-cumul'), alpha = .7) +
scale_fill_manual(name="Legend",values=cols) +
labs(y = "", x = paste0('Days after detection of ', thresh_pat, 'th case')) +
theme(legend.position = 'top') +
facet_wrap(~loc, scales = "free")
p5
p5 = ggplot(df_sub, aes(x = timenorm_num)) +
geom_col(aes(y = recov, fill = 'Recovered-cumul'), alpha = .7) +
geom_col(aes(y = active, fill = 'Active'), alpha = .7) +
geom_col(aes(y = died, fill = 'Died-cumul'), alpha = .7) +
scale_fill_manual(name="Legend",values=cols) +
scale_y_continuous(labels = scales::label_number()) +
labs(y = "", x = paste0('Days after detection of ', thresh_pat, 'th case')) +
theme(legend.position = 'top') +
facet_wrap(~loc, scales = "free")
p5
View(df_sub)
dev.off()
P <- seq(0.1, 10, 0.1)
P <- seq(0, 100000, 5)
P <- seq(0, 100000, 10)
V <- seq(0, 400, 1)
P <- seq(0, 100000, 10)
t <- seq(0, 400, 1)
V <- outer(P, t, function(p,t) V <- (8.314 * t)/P)
library(plotly)
P <- seq(0, 100000, 10)
t <- seq(0, 400, 1)
V <- outer(P, t, function(p,t) V <- (8.314 * t)/P)
plot_ly(z = ~V) %>% add_surface()
P <- seq(1, 100000, 10)
t <- seq(1, 400, 1)
V <- outer(P, t, function(p,t) V <- (8.314 * t)/P)
plot_ly(z = ~V) %>% add_surface()
